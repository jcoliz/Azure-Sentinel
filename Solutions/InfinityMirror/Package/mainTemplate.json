{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "James Coliz - jcoliz@outlook.com",
    "comments": "Solution template for InfinityMirror"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "resource group name where Microsoft Sentinel is setup"
      }
    },
    "subscription": {
      "type": "string",
      "defaultValue": "[last(split(subscription().id, '/'))]",
      "metadata": {
        "description": "subscription id where Microsoft Sentinel is setup"
      }
    }
  },
  "variables": {
    "email": "jcoliz@outlook.com",
    "_email": "[variables('email')]",
    "_solutionName": "InfinityMirror",
    "_solutionVersion": "3.0.0",
    "solutionId": "infinitymirror.infinity-mirror-sentinel",
    "_solutionId": "[variables('solutionId')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "dataConnectorCCPVersion": "1.0.0",
    "_dataConnectorContentIdConnectorDefinition1": "InfinityMirrorPushConnector",
    "dataConnectorTemplateNameConnectorDefinition1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnectorDefinition1')))]",
    "_dataConnectorContentIdConnections1": "InfinityMirrorPushConnectorConnections",
    "dataConnectorTemplateNameConnections1": "[concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentIdConnections1')))]",
    "dataCollectionEndpointId1": "[concat('/subscriptions/',parameters('subscription'),'/resourceGroups/',parameters('resourceGroupName'),'/providers/Microsoft.Insights/dataCollectionEndpoints/',parameters('workspace'))]",
    "blanks": "[replace('b', 'b', '')]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnectorDefinition1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "displayName": "Infinity Mirror Push Connector",
        "contentKind": "DataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
              "apiVersion": "2022-09-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
              "location": "[parameters('workspace-location')]",
              "kind": "Customizable",
              "properties": {
                "connectorUiConfig": {
                  "id": "InfinityMirrorPushConnector",
                  "title": "Infinity Mirror Push Connector",
                  "publisher": "Infinity Mirror",
                  "descriptionMarkdown": "The Infinity Mirror connector provides visibility of deception events generated by Infinity Mirror into Microsoft Sentinel.",
                  "graphQueries": [
                    {
                      "metricName": "Deception Events",
                      "legend": "InfinityMirrorDeceptionEvents_CL",
                      "baseQuery": "InfinityMirrorDeceptionEvents_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Infinity Mirror Deception Events",
                      "query": "InfinityMirrorDeceptionEvents_CL\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "InfinityMirrorDeceptionEvents_CL",
                      "lastDataReceivedQuery": "InfinityMirrorDeceptionEvents_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriteria": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "InfinityMirrorDeceptionEvents_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Microsoft Entra",
                        "description": "Permission to create an app registration in Microsoft Entra ID. Typically requires Entra ID Application Developer role or higher."
                      },
                      {
                        "name": "Microsoft Azure",
                        "description": "Permission to assign Monitoring Metrics Publisher role on data collection rule (DCR). Typically requires Azure RBAC Owner or User Access Administrator role"
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "title": "1. Create ARM Resources and Provide the Required Permissions",
                      "description": "This connector provisions the necessary Azure resources to enable Infinity Mirror to push deception events to the Microsoft Sentinel Ingestion API.",
                      "instructions": [
                        {
                          "type": "Markdown",
                          "parameters": {
                            "content": "#### Automated Configuration and Secure Data Ingestion with Entra Application \nClicking on \"Connect\" will trigger the creation of Log Analytics tables and a Data Collection Rule (DCR). \nIt will then create an Entra application, link the DCR to it, and set the entered secret in the application. This setup enables data to be sent securely to the DCR using an Entra identity."
                          }
                        },
                        {
                          "parameters": {
                            "label": "Connect",
                            "applicationDisplayName": "Infinity Mirror Connector Application"
                          },
                          "type": "DeployPushConnectorButton"
                        }
                      ]
                    },
                    {
                      "title": "2. Push your logs into the workspace",
                      "description": "Use the following parameters to configure Infinity Mirror to send the logs to the workspace.",
                      "instructions": [
                        {
                          "parameters": {
                            "label": "Tenant ID (Directory ID)",
                            "fillWith": [
                              "TenantId"
                            ]
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "label": "Entra App Registration Application ID",
                            "fillWith": [
                              "ApplicationId"
                            ],
                            "placeholder": "Deploy push connector to get the App Registration Application ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "label": "Entra App Registration Secret",
                            "fillWith": [
                              "ApplicationSecret"
                            ],
                            "placeholder": "Deploy push connector to get the App Registration Secret"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "label": "Data Collection Endpoint Uri",
                            "fillWith": [
                              "DataCollectionEndpoint"
                            ],
                            "placeholder": "Deploy push connector to get the Data Collection Endpoint Uri"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "label": "Data Collection Rule Immutable ID",
                            "fillWith": [
                              "DataCollectionRuleId"
                            ],
                            "placeholder": "Deploy push connector to get the Data Collection Rule Immutable ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "label": "Events Logs Stream Name",
                            "value": "Custom-InfinityMirrorDeceptionEvents"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "James Coliz",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "InfinityMirror",
                  "email": "jcoliz@outlook.com",
                  "tier": "Partner",
                  "link": "https://infinitymirror.coliz.com"
                },
                "dependencies": {
                  "criteria": [
                    {
                      "version": "[variables('dataConnectorCCPVersion')]",
                      "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                      "kind": "ResourcesDataConnector"
                    }
                  ]
                }
              }
            },
            {
              "name": "InfinityMirrorDeceptionEvents_DCR",
              "apiVersion": "2022-06-01",
              "type": "Microsoft.Insights/dataCollectionRules",
              "location": "[parameters('workspace-location')]",
              "kind": "[variables('blanks')]",
              "properties": {
                "dataCollectionEndpointId": "[variables('dataCollectionEndpointId1')]",
                "streamDeclarations": {
                  "Custom-InfinityMirrorDetectionEvents": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "audit_event",
                        "type": "string"
                      },
                      {
                        "name": "remote_address",
                        "type": "string"
                      },
                      {
                        "name": "category",
                        "type": "string"
                      },
                      {
                        "name": "client_version",
                        "type": "string"
                      },
                      {
                        "name": "enterprise_id",
                        "type": "int"
                      },
                      {
                        "name": "username",
                        "type": "string"
                      },
                      {
                        "name": "timestamp",
                        "type": "datetime"
                      },
                      {
                        "name": "data",
                        "type": "dynamic"
                      }
                    ]
                  }
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[variables('workspaceResourceId')]",
                      "name": "clv2ws1"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Custom-InfinityMirrorDeceptionEvents"
                    ],
                    "destinations": [
                      "clv2ws1"
                    ],
                    "transformKql": "source | extend TimeGenerated = now()",
                    "outputStream": "Custom-InfinityMirrorDeceptionEvents_CL"
                  }
                ]
              }
            },
            {
              "name": "InfinityMirrorDeceptionEvents_CL",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "location": "[parameters('workspace-location')]",
              "kind": null,
              "properties": {
                "plan": "Analytics",
                "schema": {
                  "name": "InfinityMirrorDeceptionEvents_CL",
                  "columns": [
                    {
                      "name": "TimeGenerated",
                      "type": "datetime"
                    },
                    {
                      "name": "TimeOnClient",
                      "type": "datetime"
                    },
                    {
                      "name": "Id",
                      "type": "string"
                    },
                    {
                      "name": "Message",
                      "type": "string"
                    },
                    {
                      "name": "Properties",
                      "type": "dynamic"
                    },
                    {
                      "name": "Category",
                      "type": "string"
                    },
                    {
                      "name": "Severity",
                      "type": "string"
                    },
                    {
                      "name": "Campaign",
                      "type": "string"
                    },
                    {
                      "name": "Decoy",
                      "type": "dynamic"
                    },
                    {
                      "name": "DeviceEventClass",
                      "type": "string"
                    },
                    {
                      "name": "SourceAddress",
                      "type": "string"
                    },
                    {
                      "name": "SourceHostName",
                      "type": "string"
                    },
                    {
                      "name": "SourceHostId",
                      "type": "string"
                    },
                    {
                      "name": "DestinationAddress",
                      "type": "string"
                    },
                    {
                      "name": "DestinationPort",
                      "type": "string"
                    },
                    {
                      "name": "MitreTechnique",
                      "type": "dynamic"
                    },
                    {
                      "name": "FileHash",
                      "type": "string"
                    },
                    {
                      "name": "User",
                      "type": "string"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentIdConnectorDefinition1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentIdConnectorDefinition1'))]",
      "apiVersion": "2022-09-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectorDefinitions",
      "location": "[parameters('workspace-location')]",
      "kind": "Customizable",
      "properties": {
        "connectorUiConfig": {
          "id": "InfinityMirrorPushConnector",
          "title": "Infinity Mirror Push Connector",
          "publisher": "Infinity Mirror",
          "descriptionMarkdown": "The Infinity Mirror connector provides visibility of deception events generated by Infinity Mirror into Microsoft Sentinel.",
          "graphQueries": [
            {
              "metricName": "Deception Events",
              "legend": "InfinityMirrorDeceptionEvents_CL",
              "baseQuery": "InfinityMirrorDeceptionEvents_CL"
            }
          ],
          "sampleQueries": [
            {
              "description": "Infinity Mirror Deception Events",
              "query": "InfinityMirrorDeceptionEvents_CL\n | sort by TimeGenerated desc"
            }
          ],
          "dataTypes": [
            {
              "name": "InfinityMirrorDeceptionEvents_CL",
              "lastDataReceivedQuery": "InfinityMirrorDeceptionEvents_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriteria": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "InfinityMirrorDeceptionEvents_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)"
              ]
            }
          ],
          "availability": {
            "status": 1
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft Entra",
                "description": "Permission to create an app registration in Microsoft Entra ID. Typically requires Entra ID Application Developer role or higher."
              },
              {
                "name": "Microsoft Azure",
                "description": "Permission to assign Monitoring Metrics Publisher role on data collection rule (DCR). Typically requires Azure RBAC Owner or User Access Administrator role"
              }
            ]
          },
          "instructionSteps": [
            {
              "title": "1. Create ARM Resources and Provide the Required Permissions",
              "description": "This connector provisions the necessary Azure resources to enable Infinity Mirror to push deception events to the Microsoft Sentinel Ingestion API.",
              "instructions": [
                {
                  "type": "Markdown",
                  "parameters": {
                    "content": "#### Automated Configuration and Secure Data Ingestion with Entra Application \nClicking on \"Connect\" will trigger the creation of Log Analytics tables and a Data Collection Rule (DCR). \nIt will then create an Entra application, link the DCR to it, and set the entered secret in the application. This setup enables data to be sent securely to the DCR using an Entra identity."
                  }
                },
                {
                  "parameters": {
                    "label": "Connect",
                    "applicationDisplayName": "Infinity Mirror Connector Application"
                  },
                  "type": "DeployPushConnectorButton"
                }
              ]
            },
            {
              "title": "2. Push your logs into the workspace",
              "description": "Use the following parameters to configure Infinity Mirror to send the logs to the workspace.",
              "instructions": [
                {
                  "parameters": {
                    "label": "Tenant ID (Directory ID)",
                    "fillWith": [
                      "TenantId"
                    ]
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "label": "Entra App Registration Application ID",
                    "fillWith": [
                      "ApplicationId"
                    ],
                    "placeholder": "Deploy push connector to get the App Registration Application ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "label": "Entra App Registration Secret",
                    "fillWith": [
                      "ApplicationSecret"
                    ],
                    "placeholder": "Deploy push connector to get the App Registration Secret"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "label": "Data Collection Endpoint Uri",
                    "fillWith": [
                      "DataCollectionEndpoint"
                    ],
                    "placeholder": "Deploy push connector to get the Data Collection Endpoint Uri"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "label": "Data Collection Rule Immutable ID",
                    "fillWith": [
                      "DataCollectionRuleId"
                    ],
                    "placeholder": "Deploy push connector to get the Data Collection Rule Immutable ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "label": "Events Logs Stream Name",
                    "value": "Custom-InfinityMirrorDeceptionEvents"
                  },
                  "type": "CopyableLabel"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnectorDefinition1')))]",
      "apiVersion": "2022-01-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectorDefinitions', variables('_dataConnectorContentIdConnectorDefinition1'))]",
        "contentId": "[variables('_dataConnectorContentIdConnectorDefinition1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorCCPVersion')]",
        "source": {
          "sourceId": "[variables('_solutionId')]",
          "name": "[variables('_solutionName')]",
          "kind": "Solution"
        },
        "author": {
          "name": "James Coliz",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "InfinityMirror",
          "email": "jcoliz@outlook.com",
          "tier": "Partner",
          "link": "https://infinitymirror.coliz.com"
        },
        "dependencies": {
          "criteria": [
            {
              "version": "[variables('dataConnectorCCPVersion')]",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "kind": "ResourcesDataConnector"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('dataConnectorTemplateNameConnections1'), variables('dataConnectorCCPVersion'))]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "contentId": "[variables('_dataConnectorContentIdConnections1')]",
        "displayName": "Infinity Mirror Push Connector",
        "contentKind": "ResourcesDataConnector",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorCCPVersion')]",
          "parameters": {
            "guidValue": {
              "defaultValue": "[[newGuid()]",
              "type": "securestring"
            },
            "innerWorkspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "auth": {
              "type": "object",
              "defaultValue": {
                "appId": "[[parameters('auth').appId]]",
                "servicePrincipalId": "[[parameters('auth').servicePrincipalId]]"
              }
            },
            "connectorDefinitionName": {
              "defaultValue": "Infinity Mirror Push Connector",
              "type": "securestring",
              "minLength": 1
            },
            "workspace": {
              "defaultValue": "[parameters('workspace')]",
              "type": "securestring"
            },
            "dcrConfig": {
              "defaultValue": {
                "dataCollectionEndpoint": "data collection Endpoint",
                "dataCollectionRuleImmutableId": "data collection rule immutableId"
              },
              "type": "object"
            }
          },
          "variables": {
            "_dataConnectorContentIdConnections1": "[variables('_dataConnectorContentIdConnections1')]"
          },
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', variables('_dataConnectorContentIdConnections1')))]",
              "apiVersion": "2022-01-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentIdConnections1'))]",
                "contentId": "[variables('_dataConnectorContentIdConnections1')]",
                "kind": "ResourcesDataConnector",
                "version": "[variables('dataConnectorCCPVersion')]",
                "source": {
                  "sourceId": "[variables('_solutionId')]",
                  "name": "[variables('_solutionName')]",
                  "kind": "Solution"
                },
                "author": {
                  "name": "James Coliz",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "InfinityMirror",
                  "email": "jcoliz@outlook.com",
                  "tier": "Partner",
                  "link": "https://infinitymirror.coliz.com"
                }
              }
            },
            {
              "name": "[[concat(parameters('innerWorkspace'),'/Microsoft.SecurityInsights/', 'InfinityMirrorPushConnector', parameters('guidValue'))]",
              "apiVersion": "2023-02-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "Push",
              "properties": {
                "connectorDefinitionName": "InfinityMirrorPushConnector",
                "dcrConfig": {
                  "streamName": "Custom-InfinityMirrorDeceptionEvents",
                  "dataCollectionEndpoint": "[[parameters('dcrConfig').dataCollectionEndpoint]",
                  "dataCollectionRuleImmutableId": "[[parameters('dcrConfig').dataCollectionRuleImmutableId]"
                },
                "auth": {
                  "type": "Push",
                  "AppId": "[[parameters('auth').appId]",
                  "ServicePrincipalId": "[[parameters('auth').servicePrincipalId]"
                },
                "request": {
                  "RetryCount": 1
                },
                "response": {
                  "eventsJsonPaths": [
                    "$.messages"
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "contentProductId": "[concat(take(variables('_solutionId'), 50),'-','rdc','-', uniqueString(concat(variables('_solutionId'),'-','ResourcesDataConnector','-',variables('_dataConnectorContentIdConnections1'),'-', variables('dataConnectorCCPVersion'))))]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "version": "[variables('dataConnectorCCPVersion')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.0",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "InfinityMirror",
        "publisherDisplayName": "InfinityMirror",
        "descriptionHtml": "<p><strong>Note:</strong> Please refer to the following before installing the solution:</p>\n<p>• Review the solution <a href=\"https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/InfinityMirror/ReleaseNotes.md\">Release Notes</a></p>\n<p>• There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</p>\n<p>The Infinity Mirror solution for Microsoft Sentinel enables you to ingest Infinity Mirror deception events into Microsoft Sentinel using the Microsoft Sentinel Analytics Workspace.</p>\n<p><strong>Data Connectors:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/jcoliz/Azure-Sentinel/refs/heads/topic/infinity-mirror/Logos/InfinityMirror.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "InfinityMirror",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "James Coliz",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "InfinityMirror",
          "email": "jcoliz@outlook.com",
          "tier": "Partner",
          "link": "https://infinitymirror.coliz.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentIdConnections1')]",
              "version": "[variables('dataConnectorCCPVersion')]"
            }
          ]
        },
        "firstPublishDate": "2025-09-03",
        "lastPublishDate": "2025-09-03",
        "providers": [
          "Infinity Mirror"
        ],
        "categories": {
          "domains": [
            "Security - Threat Protection",
            "Security - Information Protection"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
